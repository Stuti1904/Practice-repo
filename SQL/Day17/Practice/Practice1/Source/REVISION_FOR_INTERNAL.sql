CREATE DATABASE RevisionDB

USE RevisionDB

/*USING CREATE COMMAND*/

CREATE TABLE DemoEmployee
(
EmpID INT PRIMARY KEY, /*ALWAYS MAKE A PRIMARY KEY*/
EmpName VARCHAR(50),
EmpSalary money,
JoiningDate Date,
DepartmentID INT,
ManagerID INT
)

/*INSERTING A SINGLE ROW*/
INSERT INTO DemoEmployee VALUES(1, 'ABC', 30000, '2021-07-07', 1, 0)

/*INSERTING MULTIPLE VALUES*/

INSERT INTO DemoEmployee VALUES (2, 'CDE', 30000, '2021-07-07', 1, 1),
(3, 'FGH', 10000, '2021-07-07', 1, 1),
(4, 'JK', 90000, '2021-07-07', 1, 0),
(5, 'LMNO', 80000, '2021-07-07', 1, 4)

/*MAKING FOREIGN KEY*/

CREATE TABLE Department
(
DepartmentID INT PRIMARY KEY,
DepartmentName varchar(50)
)

INSERT INTO Department VALUES (1, 'CHAPTERONE')

ALTER TABLE DEMOEMPLOYEE ADD FOREIGN KEY (DEPARTMENTID)  REFERENCES DEPARTMENT(DEPARTMENTID)

/*UPDATING VALUES*/

UPDATE DemoEmployee SET JoiningDate='2020-08-05' WHERE EmpID=3

/*SELECTING QUERY*/

SELECT * FROM DemoEmployee


/*USING WHERE CLAUSE*/

SELECT* FROM DemoEmployee WHERE EmpNamE='ABC'

/* TRYING MERGE*/

CREATE TABLE PRODUCT_LIST
(
P_ID INT PRIMARY KEY,
P_NAME VARCHAR(50),
P_PRICE MONEY
)
CREATE TABLE UPDATED_LIST
(
P_ID INT PRIMARY KEY,
P_NAME VARCHAR(50),
P_PRICE MONEY
)

INSERT INTO PRODUCT_LIST VALUES (101, 'TEA', 10),
(102, 'COFFEE', 15),
(103, 'BISCUIT', 20)
INSERT INTO UPDATED_LIST VALUES (101, 'TEA', 10),
(102, 'COFFEE', 25),
(104, 'CHIPS', 22)

--MERGING QUERIES START

MERGE PRODUCT_LIST AS TARGET
USING UPDATED_LIST AS SOURCE
ON(TARGET.P_ID=SOURCE.P_ID)
WHEN MATCHED
AND TARGET.P_NAME<> SOURCE.P_NAME
OR TARGET.P_PRICE<> SOURCE.P_PRICE
THEN UPDATE
SET TARGET.P_NAME=SOURCE.P_NAME,
TARGET.P_PRICE=SOURCE.P_PRICE

WHEN NOT MATCHED BY TARGET
THEN INSERT (P_ID, P_NAME, P_PRICE)
VALUES(SOURCE.P_ID, SOURCE.P_NAME, SOURCE.P_PRICE)

WHEN NOT MATCHED BY SOURCE
THEN DELETE;

SELECT*FROM PRODUCT_LIST


/*ORDER BY*/

SELECT* FROM PRODUCT_LIST ORDER BY P_NAME

/*STRING FUNCTIONS*/

SELECT ASCII('S')

SELECT CHARINDEX('S', 'STUTI SHAHU')

SELECT CONCAT('STUTI','.', 'SHAHU')

SELECT LEN('STUTI SHAHU')


/*CAST DATE*/

--SAMPLE INPUT: 2022-07-07
--SAMPLE OUTPUT: JULY 7,2022
SELECT DATENAME(MM, GETDATE())+ SPACE(1)+ CAST(DATEPART(DD,GETDATE())AS VARCHAR)+ ','+CAST(DATEPART(YYYY, GETDATE())AS VARCHAR)

/*MATH FUNCTION*/

SELECT CEILING(19.04)-- WILL GIE 20 AS OUTPUT AS IT FINDS OUT THE NEXT IMMEDIATE INTEGER THAT IS GREATER THAN OR EQUAL TO THE VALUE

SELECT EXP(9.0)

SELECT ROUND(15.999, 1) --WILL ROUND TO THE LENGTH SPECIFIED AS AN INTEGER EXPRESSION

--Write a query to display the current date in the following format. Sample output : 12:00 AM Sep 5, 2014


SELECT CONVERT(VARCHAR,CONVERT(TIME, GETDATE()), 100) + SPACE(1) + CONVERT(VARCHAR, CONVERT(DATE, GETDATE()), 107)

/*AGGREGATE FUNCTION*/
SELECT SUM(P_PRICE) FROM PRODUCT_LIST

SELECT COUNT(*) FROM PRODUCT_LIST--GIVES TOTAL NUMBER OF ROWS

USE AdventureWorks2019

/*JOINS*/

--INNER JOIN

SELECT E.BusinessEntityID, E.JobTitle, EPH.RATE, EPH.PAYFREQUENCY
FROM HumanResources.Employee E
JOIN HumanResources.EmployeePayHistory EPH
ON E.BusinessEntityID=EPH.BusinessEntityID
--LEFT OUTER JOIN
SELECT  Sales.SalesOrderDetail.SalesOrderID, Sales.SalesOrderDetail.UnitPrice, SALES.SpecialOfferProduct.ProductID FROM Sales.SpecialOfferProduct LEFT OUTER JOIN SALES.SalesOrderDetail ON Sales.SalesOrderDetail.ProductID=SALES.SpecialOfferProduct.ProductID ORDER BY Sales.SalesOrderDetail.UnitPrice

-- RIGHT OUTER JOIN
SELECT E.JOBTITLE, D.JOBCANDIDATEID FROM HumanResources.Employee E RIGHT OUTER JOIN HumanResources.JobCandidate D ON E.BusinessEntityID= D.BusinessEntityID


--CROSS JOIN
USE RevisionDB

CREATE TABLE MEAL
(
MEALID INT PRIMARY KEY,
MEALNAME VARCHAR(100)
)
CREATE TABLE DRINKS
(
DRINKID INT PRIMARY KEY,
DRINKNAME VARCHAR(100)
)

INSERT INTO MEAL VALUES(1, 'BURGER'),
(2, 'PIZZAPUFF'),
(3, 'PIZZA')
INSERT INTO DRINKS VALUES(1, 'COLA'),
(2, 'ORANGE JUICE'),
(3, 'MILKSHAKE')

SELECT * FROM MEAL CROSS JOIN DRINKS --OR
SELECT * FROM MEAL, DRINKS

-- IN CROSS JOIN THE ROW COUNT IS EQUALS TO THE MULTIPLICATION OF THE ROWS OF BOTH THE TABLES

/*SUB QUERIES*/

SELECT * FROM DemoEmployee
SELECT EMPNAME, EMPSALARY FROM DemoEmployee WHERE EMPSALARY>(SELECT EMPSALARY FROM DemoEmployee WHERE EmpName='ABC')

-- IN KEYWORD 
USE AdventureWorks2019
SELECT BusinessEntityID FROM PERSON.BusinessEntityAddress WHERE AddressID IN (SELECT AddressID FROM Person.Address WHERE CITY='BOTHELL')

--EXISTS
SELECT BUSINESSENTITYID, JOBTITLE FROM HumanResources.Employee WHERE EXISTS (SELECT * FROM HumanResources.EmployeeDepartmentHistory WHERE BusinessEntityID=HumanResources.Employee.BusinessEntityID AND DepartmentID=4)

